Description: Udacity DevOps Project 2 - Highly scalable webapp - Udagram - Steven Melendez

  Services infrastructure

  Create a Launch Configuration in order to deploy four servers, two located in each of
  your private subnets. The launch configuration will be used by an auto-scaling group.
  You'll need two vCPUs and at least 4GB of RAM. The Operating System to be used is
  Ubuntu 18.

Parameters:
  Environment:
    Description: Environment name, used as a prefix for resources
    Type: String

  Project:
    Description: Project name, used for resources tagging
    Type: String

  WebServerImageId:
    Description: Web serve image id
    Type: String
    Default: ami-07a29e5e945228fa1 # Ubuntu Server 18.04 LTS

  WebServerVolumeSize:
    Description: Web server disk volume size
    Type: String
    Default: 10

  WebServerInstanceType:
    AllowedValues:
      - t2.nano
      - t2.medium
      - t2.large
      - t3.medium
      - t3.large
      - t3.xlarge
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
    ConstraintDescription: Web server instance type. t2.nano - dev instance, t3.medium - default
    Default: t3.medium
    Description: WebServer EC2 instance type
    Type: String

  CPUUsagePercentPolicyTargetValue:
    Description: Average CPU utilization
    Type: String
    Default: 75.0

  ALBRequestCompleteCountTargetValue:
    Description: Number of requests completed per target in an Application Load Balancer target group.
                How many requests the application can handle per instance
    Type: String
    Default: 3

Resources:

  # Web server Role
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  ProfileWithRolesForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  # ----------------- EC2 ------------------
  WebAppServer:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: !Ref WebServerImageId
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      SecurityGroups:
      - Fn::ImportValue:
          !Sub "${Project}-AppSecurityGroupID"
      InstanceType: !Ref WebServerInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: !Ref WebServerVolumeSize


  # ------------ Resource groups -----------
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: / # physical file path check.
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 7
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${Project}-VPCID"

  # Define an autoscaling grou
  WebAppServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      # Private Subnets
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${Project}-Private-Subnet-IDs
      LaunchConfigurationName: !Ref WebAppServer
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      Tags:
        - Key: Name
          Value: EC2-Instance
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref Project
          PropagateAtLaunch: true


# ------------ Load balancer ---------------
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${Project}-Public-Subnet-1-ID
      - Fn::ImportValue: !Sub ${Project}-Public-Subnet-2-ID
      SecurityGroups:
      - Fn::ImportValue: !Sub ${Project}-LBSecurityGroupID
      Tags:
        - Key: Name
          Value: Load Balancer
        - Key: Project
          Value: !Ref Project

 
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP

  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1


#---------------- Scaling Policies ---------------
  WebServerCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebAppServerGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUUsagePercentPolicyTargetValue

  WebServerRequestCountPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebAppServerGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join
            - '/'
            - - !GetAtt WebAppLoadBalancer.LoadBalancerFullName
              - !GetAtt WebAppTargetGroup.TargetGroupFullName
        TargetValue: !Ref ALBRequestCompleteCountTargetValue

# -------------Output ------------

Outputs:

  DNS:
    Description: The website URL
    Value:
      !Sub
        - 'http://${DNSName}'
        - {DNSName: !GetAtt 'WebAppLoadBalancer.DNSName'}
    Export:
      Name: !Sub "${Project}-SiteURL"

